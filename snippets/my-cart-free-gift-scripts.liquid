{% if settings.enable_free_product == 'enable_free_x_compared' %}
  {% comment %} Promo variant id - we need the id of one of the variants {% endcomment %}
  {% assign giftProduct = settings.gift_product  %}
  {% assign giftProductOption = settings.gift_option  %}
  {% assign triggerProduct = settings.trigger_product  %}
  {% assign triggerProductOption = settings.trigger_option  %}

  {% if giftProduct and triggerProduct %}
    <script type="module">
        import { cartRequestAdd, cartRequestChange, subscribeToCartStateUpdate } from '{{ "liquid-ajax-cart-v1.10.0.js" | asset_url }}';
  
        window.giftProduct = {{ all_products[giftProduct] | json }};
  
        subscribeToCartStateUpdate( state => {
  
          giftProduct = window.giftProduct;
  
          // get items from the cart
          let items = state.cart.items;
          const totalItemsInCart = state.cart.item_count;
  
          // check if trigger product is on the cart
          const giftTriggerItem = items.filter(item => {
              return item.handle === {{ triggerProduct | json }};
          });
  
          // check if there is any gift product already added to the cart
          const autoAddedLineItem = state.cart.items.findIndex( lineItem => { 
              return lineItem.properties?._autoadded === 'Yes' ;
          });
  
          // add a gift product if there is a trigger product on the cart
          if ( giftTriggerItem.length >= 1 && autoAddedLineItem === -1 ){
  
            // find size of trigger product
            let giftTriggerSize = giftTriggerItem.map(value => {
                return value.variant_options[{{ giftProductOption }}];
            }).toString();
  
            // choose gift product that matches the size
            let selectedGiftProduct = giftProduct.variants.find(selected => {
                return selected.{{ triggerProductOption }} === giftTriggerSize;
            });
  
            cartRequestAdd({ 
                items: [
                  {
                    id: selectedGiftProduct.id,
                    quantity: 1,
                    properties: {
                    "_autoadded": "Yes" 
                    }
                  }
                ]  
            });
          } 
        });
    </script>
  {% endif %}
{% endif %}


{% if settings.enable_free_product == 'enable_free_x_by_y' %}
  {% comment %} Promo variant id - we need the id of one of the variants {% endcomment %}
  {% assign giftProductID = settings.gift_product_id  %}
  {% assign triggerProduct = settings.trigger_product  %}

  {% if giftProductID and triggerProduct %}
    <script type="module">
  
        import { cartRequestAdd, cartRequestChange, subscribeToCartStateUpdate } from '{{ "liquid-ajax-cart-v1.10.0.js" | asset_url }}';
  
        subscribeToCartStateUpdate( state => {
  
          // get items from the cart
          let items = state.cart.items;
          const totalItemsInCart = state.cart.item_count;
  
          // check if trigger product is on the cart
          const giftTriggerItem = items.filter(item => {
              return item.handle === {{ triggerProduct | json }};
          });
  
          // check if there is any gift product already added to the cart
          const autoAddedLineItem = state.cart.items.findIndex( lineItem => { 
              return lineItem.properties?._autoadded === 'Yes' ;
          });
  
          // add a gift product if there is a trigger product on the cart
          if ( giftTriggerItem.length >= 1 && autoAddedLineItem === -1 ){
  
            cartRequestAdd({ 
                items: [
                  {
                    id: {{ giftProductID }},
                    quantity: 1,
                    properties: {
                    "_autoadded": "Yes" 
                    }
                  }
                ]  
            });
          } 
        });
  
    </script>
  {% endif %}
{% endif %}

{% if settings.enable_free_product == 'free_for_x_amountset' %}
  {% if product.handle == 'therapiedecken' %}
    {% comment %} Promo variant id - we need the id of one of the variants {% endcomment %}
    
    {% assign promoSubtotal = settings.gift_product_min_spend  %}
  
    {% if promoSubtotal != blank %}
      <script type="module">
        import { cartRequestAdd, cartRequestChange, subscribeToCartStateUpdate } from '{{ "liquid-ajax-cart-v1.10.0.js" | asset_url }}';
  
  		const variants135 = [
          '36977356701760', '36977356734528', '39363513614400', '39367277871168', '39416082628672', '36987428208704', '36987457044544', '39381454782528', '39381454815296', '39381454848064', '36960058769472', '36960058802240', '39363513843776', '39367277936704', '39416082661440', '36987428241472', '36987457077312', '39381454880832', '39381454913600', '39381454946368', '36960058998848', '36960059031616', '39363514073152', '39367278002240', '39416082694208', '36987428274240', '36987457110080', '39381454979136', '39381455011904', '39381455044672', '36960059228224', '36960059260992', '39363514302528', '39367278067776', '39416082726976', '36987428307008', '36987457142848', '39381455077440', '39381455110208', '39381455142976', '36960059457600', '36960059490368', '39363514531904', '39367278133312', '39416082759744', '36987428372544', '36987457175616', '39381455175744', '39381455208512', '39381455241280'
          ];
          
          const variants150 = [
          '36960059686976', '36960059719744', '39363514761280', '39367278198848', '39416082792512', '36987428405312', '36987457208384', '39381455274048', '39381455306816', '39381455339584', '36960059916352', '36960059949120', '39363514990656', '39367278264384', '39416082825280', '36987428470848', '36987457241152', '39381455372352', '39381455405120', '39381455437888', '36960060145728', '36960060178496', '39363515220032', '39367278329920', '39416082858048', '36987428503616', '36987457273920', '39381455470656', '39381455503424', '39381455536192', '36960060375104', '36960060407872', '39363515449408', '39367278395456', '39416082890816', '36987428536384', '36987457306688', '39381455568960', '39381455601728', '39381455634496'
          ]
          
          subscribeToCartStateUpdate( state => {            
              let promoVariant = settings.gift_product_id;
              
              state.cart.items.forEach(item => {
              	if ( variants135.indexOf("" + item.id) >= 0 ) {
                  	console.log(" 135 variant ");
                  	promoVariant = '39353564233792';
                  } else if ( variants150.indexOf("" + item.id) >= 0 ) {
                  	console.log(" 150 variant ");
                  	promoVariant = '39353564266560';
                  };
              });
              
              console.log("promoVariant: ");
              console.log(promoVariant);
              const promoSubtotal = {{ promoSubtotal }}00;
  
              // If cart state exists and there is no Ajax Cart API request in progress
              if ( state.status.cartStateSet && !state.status.requestInProgress ) {
                  let currentSubtotal = state.cart.items_subtotal_price;
  
                  // Find out if there is a product that was automatically added before
                  const autoAddedLineItem = state.cart.items.findIndex( lineItem => { 
                      return lineItem.properties?._autoadded === 'Yes' ;
                  });
  
                  // If there is the automaticaly added product —
                  // lets calculate the currentSubtotal without the product
                  if ( autoAddedLineItem > -1 ) {
                      currentSubtotal -= state.cart.items[autoAddedLineItem].final_line_price;
                  }
  
                  if ( currentSubtotal >= promoSubtotal ) {
  
                      // If there is no a promoVariant product with an applied discount
                      // lets add one with _autoadded property
                      if ( autoAddedLineItem === -1 ) {
                          setTimeout(function(){
                            cartRequestAdd({ 
                                items: [{
                                    id: promoVariant,
                                    quantity: 1,
                                    properties: { "_autoadded": "Yes" }
                                }]  
                            });
  
                          },100);
                      }
                  } else {
  
                      // If current cart subtotal is less than $100
                      // and an autoadded product is still in the cart —
                      // lets remove it
                      if ( autoAddedLineItem > -1 ) {
                          cartRequestChange({ 
                              "line": autoAddedLineItem + 1,
                              "quantity": 0
                          });
                      }
                  }
              }
              
              /*
              const promoVariantSelector = document.getElementById("my-cart_finalPrice-" + promoVariant);
              promoVariantSelector.classList.add('discount_price');
              */
  
           });
      </script>
    {% endif %}
  {% endif %}
{% endif %}